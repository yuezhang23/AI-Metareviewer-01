***** Image Program ******** FEATURES ***this program consists of three folders:    ** Folder1: src (details seen below)    ** Folder2: test : tests for all classes in Folder1.    ** Folder3: res : sample ppm images used or generated in the program;                      diagram.txt                      -command-of-script.txt                      HW09.jarFolder1 contains the MVC based design of the program that includes the controller, model and view.The directory of Folder1 is as follows:        1. controller package:            1.1 interface:                * basic interface:                    Controller:                             This is the basic interface that runs the program.                * command interface:                    Command:                             This represents running a command through the controller                             using a collection of commands available to the user.                    ImageLoader:                             This represents the ImageLoader interface to load an image file and                             return a state of Image model.                    ImageSaver:                             This represents the ImageSaver interface to keep writing data from                             an image model required for a standard PPM image file.                    ImageTransform:                             This represents the ImageTransform interface that extends the Command                             interface with all the methods required to render an Image model.            1.2 class:                * basic class:                   ControllerImpl:                              this is the class that implements Controller interface                              by the processing() method.                * command class:                    RunLoader, ImageLoading:                              The RunLoader class implements the Command interface by running                              load command and continuously reading data from a Scanner object.                              The ImageLoading implements the ImageLoader interface by returning                              an ImageState model that represents the data.                    RunSaver, ImageSaving:                              The RunSaver class implements the Command interface by running                              save command and continuously reading data from a Scanner object                              that contains the model and export data to a standard PPM file.                              This ImageSaving class implements the ImageSaver interface by                              presenting data from an Appendable object.                    RunBrighten, BrightenTransform:                              The RunBrighten class implements the Command interface by running                              brighten command continuously reading data from a Scanner object.                              The BrightenTransform class implements the ImageTransform interface                              with method to render all pixel components by given increment.                    RunGreyScaleAbstract:                              This is an abstract class for overall greyscale related methods                              that runs and continuously reads data from a Scanner object.                    RunRed, RunGreen, RunBlue, RunLuma, RunIntensity, RunMax:                              The RunRed class implements the ImageTransform interface with                              method to replace all pixel components with red-component values.                              The RunGreen class implements the ImageTransform interface with                              method to replace all pixel components with green-component values.                              The RunBlue class implements the ImageTransform interface with                              method to replace all pixel components with blue-component values.                              The RunMax class implements the ImageTransform interface with                              method to replace all pixel components with maximum value.                              The RunLuma class implements the ImageTransform interface with                              method to replace all pixel components with the Luma value.                              The RunIntensity class implements the ImageTransform interface with                              method to replace all pixel components with the average value.        2. model package:            2.1 interface:                PixelState:   This interface represents operations that can be used to read from a                              state of a Pixel model without changing it.                Pixel:        This interface extends the PixelState interface by adding setters                              that can modify the state of a Pixel model.                ImageState:   This interface represents operations that can be used to read from                              a state of an Image model without changing it.                Image:        This interface extends the ImageState interface by adding setPixel()                              method that can modify the state of an Image model.                ImageDataBase:This interface represents operations that can be used to read and map                              the state of an Image model to a String name.            2.2 class:                PixelImpl:   This class implements both Pixel interface and PixelState interface                             with all the methods that can read and modify a Pixel model.                ImageImpl:   This class implements both ImageState interface and Image interface                             with all the methods that can read and modify an Image model.                ImageData:   This class implements the ImageDatabase interface with all methods.        3. view package            3.1 interface:                View:        This interface represents the view to read all error messages from                             running the program and render a given Image model as well.            3.2 class:                ViewImpl:    This class implements the View interface.*** INSTRUCTIONS ***1. run command_script.txt        Steps:            1. run demo main in the Main class.            2. read the commands from the command_script and write to the terminal               one line each time and by the order written in the script. Different order may               end up with error message from the terminal.            3. the program will exit after input the "quit" line.            4. go to images/script_run path and find all the files created during the run.